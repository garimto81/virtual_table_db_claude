name: Test and Deploy Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  schedule:
    # 매일 오전 9시 자동 테스트
    - cron: '0 0 * * *'

env:
  NODE_VERSION: '18'
  CACHE_KEY: v1

jobs:
  # Stage 1: 코드 품질 검사
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Check code formatting
        run: npm run format:check

      - name: Type checking
        run: npm run typecheck

      - name: Security audit
        run: npm audit --audit-level=moderate

    outputs:
      quality-passed: ${{ steps.quality.outcome == 'success' }}

  # Stage 2: 단위 테스트
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        test-suite: [checksum, incremental, polling, integration]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-suite }} tests
        run: |
          npm run test:${{ matrix.test-suite }} -- --coverage
        env:
          CI: true

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.test-suite }}
          path: coverage/

      - name: Check coverage threshold
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage below 80% threshold"
            exit 1
          fi

  # Stage 3: 통합 테스트
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      chrome:
        image: browserless/chrome
        ports:
          - 3000:3000

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.test .env
          npm run setup:test

      - name: Run E2E tests
        run: |
          npm run test:e2e
        env:
          BROWSER_URL: http://localhost:3000

      - name: Performance test
        run: |
          npm run test:performance

          # 성능 기준 검증
          API_CALLS=$(cat performance-report.json | jq '.apiCalls')
          LATENCY=$(cat performance-report.json | jq '.avgLatency')

          if [ $API_CALLS -gt 1000 ]; then
            echo "API calls exceed threshold: $API_CALLS > 1000"
            exit 1
          fi

          if [ $LATENCY -gt 500 ]; then
            echo "Latency exceeds threshold: $LATENCY > 500ms"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results/
            performance-report.json

  # Stage 4: 배포 준비
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: |
          npm run build
          echo "BUILD_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Version tagging
        run: |
          VERSION=$(cat package.json | jq -r '.version')
          BUILD_TIME=$(date -u +"%Y%m%d%H%M%S")
          echo "v${VERSION}-${BUILD_TIME}-${BUILD_VERSION}" > dist/version.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: dist/

  # Stage 5: 스테이징 배포
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          path: dist/

      - name: Deploy to staging
        run: |
          # Google Apps Script 배포
          clasp push --force
          clasp deploy --description "Staging deployment $(date)"

      - name: Run smoke tests
        run: |
          npm run test:smoke -- --env=staging

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Stage 6: 프로덕션 배포 (수동 승인 필요)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: production-build
          path: dist/

      - name: Backup current version
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          mkdir -p backups/$TIMESTAMP
          # 현재 버전 백업 로직

      - name: Deploy to production
        run: |
          # A/B 테스트 설정 (10% 사용자)
          echo "Deploying with 10% rollout"

          # Google Apps Script 프로덕션 배포
          clasp push --force
          clasp deploy --deploymentId ${{ secrets.PRODUCTION_DEPLOYMENT_ID }}

      - name: Health check
        run: |
          # 배포 후 상태 확인
          for i in {1..5}; do
            STATUS=$(curl -s https://api.example.com/health | jq -r '.status')
            if [ "$STATUS" = "healthy" ]; then
              echo "Health check passed"
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed"
          exit 1

      - name: Monitor metrics
        run: |
          # 30분간 메트릭 모니터링
          npm run monitor:production -- --duration=1800

          # 롤백 조건 검사
          ERROR_RATE=$(cat metrics.json | jq '.errorRate')
          if (( $(echo "$ERROR_RATE > 5" | bc -l) )); then
            echo "Error rate too high: $ERROR_RATE%"
            echo "ROLLBACK_REQUIRED=true" >> $GITHUB_ENV
          fi

      - name: Rollback if needed
        if: env.ROLLBACK_REQUIRED == 'true'
        run: |
          echo "Rolling back deployment"
          npm run rollback:production

      - name: Update documentation
        if: success()
        run: |
          VERSION=$(cat dist/version.txt)
          echo "Deployed version: $VERSION" >> DEPLOYMENT_LOG.md
          git add DEPLOYMENT_LOG.md
          git commit -m "docs: Update deployment log for $VERSION"
          git push

  # 일일 정기 테스트
  scheduled-tests:
    name: Daily Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run test:all -- --verbose

      - name: Generate report
        run: |
          npm run report:generate

      - name: Upload daily report
        uses: actions/upload-artifact@v3
        with:
          name: daily-test-report-${{ github.run_id }}
          path: reports/

      - name: Check degradation
        run: |
          # 성능 저하 감지
          npm run check:degradation

          if [ $? -ne 0 ]; then
            echo "Performance degradation detected"
            # Slack 알림 발송
          fi

# 재사용 가능한 워크플로우
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Rollback to previous version
        run: |
          echo "Initiating emergency rollback"
          npm run rollback:immediate

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: 'Emergency rollback initiated by ${{ github.actor }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}